// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  firstName     String
  lastName      String
  email         String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  Property      Property[]
  
}

model Property {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Int
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  typeId      Int
  type        PropertyType      @relation(fields: [typeId], references: [id])
  statusId    Int
  status      PropertyStatus    @relation(fields: [statusId], references: [id])
  location    PropertyLocation?
  feature     PropertyFeature?
  images      PropertyImage[]
  agentId     Int
  agent       OfficeWorker @relation(fields: [agentId], references: [id])
  contractId    Int
  contract     PropertyContract    @relation(fields: [contractId], references: [id])
  
}


model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model PropertyFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      Int      @unique
}

model PropertyLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  city          String
  state         String
  zip           String
  country       String
  landmark      String
  district      String
  neighborhood  String
  propertyId    Int      @unique
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model PropertyStatus {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model PropertyContract {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model City {
  city_id         Int      @id @default(autoincrement())
  city_name       String
  districts       District[]
  country_id      Int
  country         Country @relation(fields: [country_id], references: [country_id])
  offices          Office[]
}

model Country {
  country_id         Int      @id @default(autoincrement())
  country_name      String
  cities           City[]
  offices          Office[]
}

model Office {
  id            Int      @id @default(autoincrement())
  name          String
  latitude      Float
  longitude     Float
  workers       OfficeWorker[]
  images        OfficeImage[]
  streetAddress String
  cityId        Int
  city          City @relation(fields: [cityId], references: [city_id])
  zip           String
  countryId     Int
  country       Country @relation(fields: [countryId], references: [country_id])  
  districtId    Int
  district      District @relation(fields: [districtId], references: [district_id])
  neighborhoodId Int
  neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [neighborhood_id])
  avatarUrl     String?
  description   String
  email         String
  phone         String
  fax           String
  xAccountId    String
  facebookAccountId    String
  linkedInAccountId    String
  instagramAccountId    String
  youtubeAccountId      String
  webUrl        String
  slug          String
  projects    Project[]


}

model OfficeImage {
  id         Int      @id @default(autoincrement())
  url        String
  officeId    Int 
  office      Office   @relation(fields: [officeId], references: [id])

}


model OfficeWorker {
  id          Int      @id @default(autoincrement())
  name        String
  surname     String
  roleId    Int 
  role      Role   @relation(fields: [roleId], references: [id])
  avatarUrl   String?
  about       String
  email       String
  phone       String
  xAccountId    String
  facebookAccountId    String
  linkedInAccountId    String
  instagramAccountId    String
  youtubeAccountId      String
  webUrl        String
  commercialDocumentId  String
  companyLegalName      String
  officeId    Int 
  office      Office   @relation(fields: [officeId], references: [id])
  properties  Property[]

  slug        String
  reviews     OfficeWorkerReview[]
}

model OfficeWorkerReview {
  id                Int      @id @default(autoincrement())
  text              String
  reviewerName      String
  reviewerSurname   String
  reviewerEmail     String
  reviewerPhone     String
  score1            Int
  score2            Int
  score3            Int
  score4            Int
  score5            Int
  score6            Int 
  avg               Int 
  officeWorkerId    Int 
  officeWorker      OfficeWorker   @relation(fields: [officeWorkerId], references: [id]) 
  isApproved        Int
  createdAt         DateTime        @default(now())
}

model Role {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String
  officeWorker OfficeWorker[]

}

model District {
  district_id        Int      @id @default(autoincrement())
  district_name      String
  city_id            Int     
  city_name          String
  neighborhoods       Neighborhood[]
  city City @relation(fields: [city_id], references: [city_id])
  offices          Office[]
}

model Neighborhood {
  neighborhood_id     Int      @id @default(autoincrement())
  neighborhood_name   String
  city_id             Int     
  city_name           String
  district_id         Int      
  district_name       String
  offices              Office[]
  district District @relation(fields: [district_id], references: [district_id])
}


model Project {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  location    ProjectLocation?
  feature     ProjectFeature?
  images      ProjectImage[]  
  officeId    Int 
  office      Office   @relation(fields: [officeId], references: [id])
  assignedAgents String
}

model ProjectLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  city          String
  state         String
  zip           String
  country       String
  landmark      String
  district      String
  neighborhood  String
  projectId    Int      @unique
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  projectId    Int      @unique
  project      Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectImage {
  id         Int      @id @default(autoincrement())
  url        String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

