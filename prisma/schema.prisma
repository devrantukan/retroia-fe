// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id
  firstName     String
  lastName      String
  email         String
  avatarUrl     String?
  createdAt     DateTime        @default(now())
  Property      Property[]
  subscriptions Subscriptions[]
}

model Property {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Int
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  typeId      Int
  type        PropertyType      @relation(fields: [typeId], references: [id])
  statusId    Int
  status      PropertyStatus    @relation(fields: [statusId], references: [id])
  location    PropertyLocation?
  feature     PropertyFeature?
  images      PropertyImage[]
  agentId     Int
  agent       OfficeWorker @relation(fields: [agentId], references: [id])
  contractId    Int
  contract     PropertyContract    @relation(fields: [contractId], references: [id])
  
}


model PropertyImage {
  id         Int      @id @default(autoincrement())
  url        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int
}

model PropertyFeature {
  id              Int      @id @default(autoincrement())
  bedrooms        Int
  bathrooms       Int
  parkingSpots    Int
  area            Int
  hasSwimmingPool Boolean
  hasGardenYard   Boolean
  hasBalcony      Boolean
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId      Int      @unique
}

model PropertyLocation {
  id            Int      @id @default(autoincrement())
  streetAddress String
  city          String
  state         String
  zip           String
  country       String
  landmark      String
  district      String
  neighborhood  String
  propertyId    Int      @unique
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model PropertyStatus {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model PropertyContract {
  id       Int        @id @default(autoincrement())
  value    String
  slug     String
  Property Property[]
}

model City {
  city_id         Int      @id @default(autoincrement())
  city_name       String
  districts       District[]
  country_id      Int
  country         Country @relation(fields: [country_id], references: [country_id])
  offices          Office[]
}

model Country {
  country_id         Int      @id @default(autoincrement())
  country_name      String
  cities           City[]
  offices          Office[]
}

model Office {
  id            Int      @id @default(autoincrement())
  name          String
  latitude      Float
  longitude     Float
  workers       OfficeWorker[]
  streetAddress String
  cityId        Int
  city          City @relation(fields: [cityId], references: [city_id])
  zip           String
  countryId     Int
  country       Country @relation(fields: [countryId], references: [country_id])  
  districtId    Int
  district      District @relation(fields: [districtId], references: [district_id])
  neighborhoodId Int
  neighborhood Neighborhood @relation(fields: [neighborhoodId], references: [neighborhood_id])
  avatarUrl     String?
  description   String
  email         String
  phone         String
  slug          String

}

model OfficeWorker {
  id          Int      @id @default(autoincrement())
  name        String
  surname     String
  title       String
  avatarUrl   String?
  about       String
  email       String
  phone       String
  officeId    Int 
  office      Office   @relation(fields: [officeId], references: [id])
  properties  Property[]
  slug        String
}

model District {
  district_id        Int      @id @default(autoincrement())
  district_name      String
  city_id            Int     
  city_name          String
  neighborhoods       Neighborhood[]
  city City @relation(fields: [city_id], references: [city_id])
  offices          Office[]
}

model Neighborhood {
  neighborhood_id     Int      @id @default(autoincrement())
  neighborhood_name   String
  city_id             Int     
  city_name           String
  district_id         Int      
  district_name       String
  offices              Office[]
  district District @relation(fields: [district_id], references: [district_id])
}

model SubscriptionPlan {
  id                    Int             @id @default(autoincrement())
  name                  String
  price                 Float
  propertyLimit         Int
  imagePerPropertyLimit Int
  features              String
  subscriptions         Subscriptions[]
}

model Subscriptions {
  id        Int              @id @default(autoincrement())
  paymentID String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  plan      SubscriptionPlan @relation(fields: [palnId], references: [id])
  palnId    Int
  userId    String
  user      User             @relation(fields: [userId], references: [id])
}
